//
//  node.h
//  gepetto-viewer
//
//  Created by Justin Carpentier, Mathieu Geisert in November 2014.
//  Copyright (c) 2014 LAAS-CNRS. All rights reserved.
//

#ifndef SCENEVIEWER_NODE_HH
#define SCENEVIEWER_NODE_HH

#include <iostream>
#include <gepetto/viewer/node-visitor.h>
#include <gepetto/viewer/config-osg.h>
#include <gepetto/viewer/node-manipulator.h>

namespace graphics {
    
    DEF_CLASS_SMART_PTR(Node)
    
    class Node
    {
    private:
        std::string id_name_; // automoatic id generated by the program

        /** PositionAttitudeTransform related to the global configuration */
        osg::AutoTransformRefPtr auto_transform_ptr_;
        osg::MatrixTransformRefPtr static_auto_transform_ptr_;
        
        /** Associated switch node */
        /** TODO: The use of multiswitch may be better */
        osg::GroupRefPtr switch_node_ptr_;
        WireFrameMode selected_wireframe_;
        std::vector< ::osg::GroupRefPtr > wireframe_modes_;

        osg::GroupRefPtr hl_switch_node_ptr_;
        std::size_t selected_highlight_;
        std::vector< ::osg::GroupRefPtr > highlight_nodes_;

        osg::NodeRefPtr dragger_node_ptr_;
        
        /** Initialization function */
        void init ();

        ::osg::Group* setupHighlightState (unsigned int state);

    protected:
        /** protected because it's used in LeafNodeCapsule */
        ::osg::GeodeRefPtr landmark_geode_ptr_;

        /** Geode pointer for landmarks */
	::osg::GeodeRefPtr geode_ptr_;
        /** Alpha value */
        float alpha_;

        /**
         \brief Default constructor
         */
        Node (const std::string& name);
        
        /** Copy constructor */
        Node (const Node& other);
        
        /**
         \brief Return the root node to include it in the scene
         */
        ::osg::GroupRefPtr asQueue () const
        {
            return static_auto_transform_ptr_;
        }

        void setID (const std::string& id_name)
        {
            id_name_ = id_name;
            switch_node_ptr_->setName (id_name_);
        }
    public:

        /**
         \brief returns rotation and position of the node
         in word frame
         */
        std::pair<osgVector3, osgQuat> getGlobalTransform() const;

        /**
         \brief getID is a public method for getting the id_name of the Object
         */
        std::string getID () const
        {
            return id_name_;
        }
        
        /** Apply a new global configuration
         */
        void applyConfiguration (const osgVector3 & position, const osgQuat & quat);
        
	/** Set Static transformation
         */
        void setStaticTransform (const osgVector3 & position, const osgQuat & quat);
        
	/** Get Static rotation
        */
        osgQuat getStaticRotation() const;

	/** Get Static position
        */
        osgVector3 getStaticPosition() const;

        /**
         \brief Virtual method for setting the visibility mode of the object : visible or not visible
         \param visibilitymode state
         */
        virtual void setVisibilityMode (const VisibilityMode& visibility_state);
        
        /**
         \brief Virtual method for setting the lighting mode of the object : influence by light or not
         \param lightingmode state
         */
        virtual void setLightingMode (const LightingMode& lighting_state);
        
        /**
         \brief Virtual method for setting the wireframe mode of the object : visible or not
         \param wireframemode state
         */
        virtual void setWireFrameMode (const WireFrameMode& wireframe_state);
        
        /** Set scale value of the OSG object */
        virtual void setScale (float scale);

        /** Set scales value of the OSG object */
        virtual void setScale (const osg::Vec3d & scale);

	/** Get scale
        */
        osgVector3 getScale() const;

        /** Set the color of the object */
        virtual void setColor (const osgVector4& color) = 0;

	virtual osg::ref_ptr<osg::Node> getOsgNode() const;
        
        /**
         \brief Return the root node to include it in the scene
         */
        virtual ::osg::GroupRefPtr asGroup () const
        {
            return switch_node_ptr_;
        }

        virtual void addLandmark(const float &size);

        ::osg::StateSetRefPtr getOrCreateRootStateSet ()
        {
          return switch_node_ptr_->getOrCreateStateSet ();
        }

        void deleteLandmark();

        void setHighlightState (unsigned int state);

        void addDragger (const nodeManipulation::DraggerType& type, bool fixedSizeInScreen);

        void removeDragger ();
        
        /*Tools::ConfigurationPtr_t getConfiguration () const
        {
            Tools::ConfigurationPtr_t configuration = Tools::Configuration::create(toDefVector3(auto_transform_ptr_->getPosition()),toEigenQuat(auto_transform_ptr_->getRotation()));
            return configuration;
        }*/

        virtual void setAlpha (const float& alpha);
	float getAlpha() const;

        SCENE_VIEWER_ACCEPT_VISITOR;
        virtual void traverse (NodeVisitor& visitor);

        /* Destructor */
        virtual ~Node ();
        
    }; /* class Node */
    
} /* namespace graphics */

#endif /* dSCENEVIEWER_NODE_HH */
